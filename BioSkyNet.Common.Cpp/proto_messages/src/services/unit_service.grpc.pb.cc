// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: services/unit_service.proto

#include "services/unit_service.pb.h"
#include "services/unit_service.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace Services {

static const char* UnitService_method_names[] = {
  "/Services.UnitService/OpenDoor",
  "/Services.UnitService/GetStream",
  "/Services.UnitService/GetDevices",
  "/Services.UnitService/UpdateLocations",
  "/Services.UnitService/GetCard",
  "/Services.UnitService/Enroll",
};

std::unique_ptr< UnitService::Stub> UnitService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< UnitService::Stub> stub(new UnitService::Stub(channel));
  return stub;
}

UnitService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_OpenDoor_(UnitService_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetStream_(UnitService_method_names[1], ::grpc::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_GetDevices_(UnitService_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateLocations_(UnitService_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCard_(UnitService_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Enroll_(UnitService_method_names[5], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status UnitService::Stub::OpenDoor(::grpc::ClientContext* context, const ::DataTypes::Location& request, ::google::protobuf::Empty* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_OpenDoor_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* UnitService::Stub::AsyncOpenDoorRaw(::grpc::ClientContext* context, const ::DataTypes::Location& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>(channel_.get(), cq, rpcmethod_OpenDoor_, context, request);
}

::grpc::ClientReaderWriter< ::Services::StreamMsg, ::DataTypes::FrameBytes>* UnitService::Stub::GetStreamRaw(::grpc::ClientContext* context) {
  return new ::grpc::ClientReaderWriter< ::Services::StreamMsg, ::DataTypes::FrameBytes>(channel_.get(), rpcmethod_GetStream_, context);
}

::grpc::ClientAsyncReaderWriter< ::Services::StreamMsg, ::DataTypes::FrameBytes>* UnitService::Stub::AsyncGetStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReaderWriter< ::Services::StreamMsg, ::DataTypes::FrameBytes>(channel_.get(), cq, rpcmethod_GetStream_, context, tag);
}

::grpc::Status UnitService::Stub::GetDevices(::grpc::ClientContext* context, const ::DataTypes::GetDevicesRequest& request, ::DataTypes::Devices* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetDevices_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::DataTypes::Devices>* UnitService::Stub::AsyncGetDevicesRaw(::grpc::ClientContext* context, const ::DataTypes::GetDevicesRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::DataTypes::Devices>(channel_.get(), cq, rpcmethod_GetDevices_, context, request);
}

::grpc::Status UnitService::Stub::UpdateLocations(::grpc::ClientContext* context, const ::DataTypes::LocationUpdates& request, ::google::protobuf::Empty* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateLocations_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* UnitService::Stub::AsyncUpdateLocationsRaw(::grpc::ClientContext* context, const ::DataTypes::LocationUpdates& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>(channel_.get(), cq, rpcmethod_UpdateLocations_, context, request);
}

::grpc::Status UnitService::Stub::GetCard(::grpc::ClientContext* context, const ::DataTypes::Device& request, ::DataTypes::CardMsg* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetCard_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::DataTypes::CardMsg>* UnitService::Stub::AsyncGetCardRaw(::grpc::ClientContext* context, const ::DataTypes::Device& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::DataTypes::CardMsg>(channel_.get(), cq, rpcmethod_GetCard_, context, request);
}

::grpc::Status UnitService::Stub::Enroll(::grpc::ClientContext* context, const ::Services::EnrollMsg& request, ::DataTypes::Faces* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Enroll_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::DataTypes::Faces>* UnitService::Stub::AsyncEnrollRaw(::grpc::ClientContext* context, const ::Services::EnrollMsg& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::DataTypes::Faces>(channel_.get(), cq, rpcmethod_Enroll_, context, request);
}

UnitService::Service::Service() {
  (void)UnitService_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      UnitService_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< UnitService::Service, ::DataTypes::Location, ::google::protobuf::Empty>(
          std::mem_fn(&UnitService::Service::OpenDoor), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      UnitService_method_names[1],
      ::grpc::RpcMethod::BIDI_STREAMING,
      new ::grpc::BidiStreamingHandler< UnitService::Service, ::Services::StreamMsg, ::DataTypes::FrameBytes>(
          std::mem_fn(&UnitService::Service::GetStream), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      UnitService_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< UnitService::Service, ::DataTypes::GetDevicesRequest, ::DataTypes::Devices>(
          std::mem_fn(&UnitService::Service::GetDevices), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      UnitService_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< UnitService::Service, ::DataTypes::LocationUpdates, ::google::protobuf::Empty>(
          std::mem_fn(&UnitService::Service::UpdateLocations), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      UnitService_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< UnitService::Service, ::DataTypes::Device, ::DataTypes::CardMsg>(
          std::mem_fn(&UnitService::Service::GetCard), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      UnitService_method_names[5],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< UnitService::Service, ::Services::EnrollMsg, ::DataTypes::Faces>(
          std::mem_fn(&UnitService::Service::Enroll), this)));
}

UnitService::Service::~Service() {
}

::grpc::Status UnitService::Service::OpenDoor(::grpc::ServerContext* context, const ::DataTypes::Location* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnitService::Service::GetStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::DataTypes::FrameBytes, ::Services::StreamMsg>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnitService::Service::GetDevices(::grpc::ServerContext* context, const ::DataTypes::GetDevicesRequest* request, ::DataTypes::Devices* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnitService::Service::UpdateLocations(::grpc::ServerContext* context, const ::DataTypes::LocationUpdates* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnitService::Service::GetCard(::grpc::ServerContext* context, const ::DataTypes::Device* request, ::DataTypes::CardMsg* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnitService::Service::Enroll(::grpc::ServerContext* context, const ::Services::EnrollMsg* request, ::DataTypes::Faces* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Services

